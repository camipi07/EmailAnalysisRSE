setwd("C:/Users/auror/OneDrive/Escritorio/proyecto_RSE/EmailAnalysisRSE")
setwd("C:/Users/auror/OneDrive/Escritorio")
setwd("C:/Users/auror/OneDrive/Escritorio/proyecto_RSE/EmailAnalysisRSE")
library("igraph")
edges <- read.csv( "DATASET/reduced-emails.edges" , header = TRUE, ,sep =' ')
library("igraph")
edges <- read.csv( "reduced-emails.edges" , header = TRUE, ,sep =' ')
g <- graph_from_data_frame( edges , directed = FALSE )
tkplot(g)
degree(g)
all_nodes <- c(edges$from, edges$to)
sort(unique(all_nodes))
#Medidas estructurales
sort(betweenness(g))
sort(closeness(g))
sort(eigen_centrality(g)$vector)
install.packages("linkprediction")
library(linkprediction)
linkprediction::proxfun(g)
library(linkprediction)
linkprediction::proxfun(g, cn)
library(linkprediction)
linkprediction::proxfun(g, "cn")
library(linkprediction)
linkprediction::proxfun(g, "rwr)
library(linkprediction)
linkprediction::proxfun(g, "rwr")
library(linkprediction)
linkprediction::proxfun(g, "dist")
library(linkprediction)
linkprediction::proxfun(g, method="dist", value="edgelist")
library(linkprediction)
sort(linkprediction::proxfun(g, method="dist", value="edgelist"))
library(linkprediction)
sort(proxfun(g, method="dist", value="edgelist"))
library(linkprediction)
values_link_prediction <- proxfun(g, method="dist", value="edgelist")
sort(values_link_prediction$values)
values_link_prediction
View(values_link_prediction)
library(linkprediction)
values_link_prediction <- proxfun(g, method="dist", value="edgelist")
sort(values_link_prediction$value)
library(linkprediction)
values_link_prediction <- proxfun(g, method="dist", value="edgelist")
values_link_prediction[order(values_link_prediction$value),]
View(values_link_prediction)
View(values_link_prediction)
library(linkprediction)
values_link_prediction <- proxfun(g, method="dist", value="edgelist")
values_link_prediction[order(values_link_prediction$value, decreasing = TRUE),]
motifs(g, size=3)
motifs(g, size=4)
motifs(g, size=5)
motifs(g, size=6)
motifs(g, size=3)
motifs(g)
motifs(g, size = 3, cut.prob = rep(0, size))
motifs(g, size=3, cut.prob = rep(0, size))
motifs(g, size=3, cut.prob = rep(0, siz3))
motifs(g, size=3, cut.prob = rep(0, 3))
embedding(g, method="metric2vec", groups=NULL)
install.packages("embedding")
install.packages("econetwork")
motifs(g, size=3, cut.prob = rep(0, 3))
embedding(g, method="metric2vec", groups=NULL)
library(econetwork)
embedding(g, method="metric2vec", groups=NULL)
diffusion_map(g)
install.packages("diffusionMap")
library(diffusionMap)
diffusionKmeans(dmap, K, params = c(), Niter = 10, epsilon = 0.001)
library(diffusionMap)
diffusionKmeans(g, K, params = c(), Niter = 10, epsilon = 0.001)
library(diffusionMap)
diffusionKmeans(diffuse(as_adjacency_matrix(g)), K, params = c(), Niter = 10, epsilon = 0.001)
library(diffusionMap)
diffusionKmeans(diffuse(as_adjacency_matrix(g)), 3, params = c(), Niter = 10, epsilon = 0.001)
library(diffusionMap)
diffusionKmeans(diffuse(as_adjacency_matrix(g)), 3, Niter = 10, epsilon = 0.001)
library(diffusionMap)
diffusionKmeans(diffuse(dist(g)), 3, params = c(), Niter = 10, epsilon = 0.001)
as_adjacency_matrix(g)
ad <- as_adjacency_matrix(g)
View(ad)
View(ad)
as.matrix(as_adjacency_matrix(g))
library(diffusionMap)
diffusionKmeans(diffuse(as.matrix(as_adjacency_matrix(g))), 3, params = c(), Niter = 10, epsilon = 0.001)
